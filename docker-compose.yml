# Author: Eryk Kulikowski @ KU Leuven (2024). Apache 2.0 License
services:

  integration:
    container_name: "integration"
    hostname: integration
    build:
      dockerfile: ./image/Dockerfile
      args:
        - OAUTH2_POXY_VERSION=${OAUTH2_POXY_VERSION:-v7.7.1}
        - NODE_VERSION=${NODE_VERSION:-22-alpine}
        - FRONTEND_VERSION=${FRONTEND_VERSION:-1.0.1}
        - NODE_ENV=${NODE_ENV:-production}
        - BASE_HREF=${BASE_HREF:-/}
        - CUSTOMIZATIONS=${CUSTOMIZATIONS:-./docker-volumes/integration/conf/customizations}
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    networks:
      - dataverse
    ports:
      - "4180:4180/tcp"
    environment:
      BACKEND_CONFIG_FILE: "/config/backend_config.json"
      FRONTEND_CONFIG_FILE: "/config/frontend_config.json"
    env_file:
      - ./docker-volumes/integration/aws/aws.env
    volumes: 
      - ./docker-volumes/integration/data:/dsdata
      - ./docker-volumes/integration/conf:/config
      - ./docker-volumes/dataverse/secrets:/run/secrets:ro
      - ./docker-volumes/integration/conf/oauth2-proxy.cfg:/oauth2-proxy.cfg
    restart: unless-stopped
    entrypoint: app 100 --config /oauth2-proxy.cfg
    depends_on:
      - dataverse
      - cache
      - keycloak

  cache:
    image: redis:7.0-alpine
    hostname: cache
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    networks:
      - dataverse
    command: redis-server --save 20 1 --loglevel warning
    volumes: 
      - ./docker-volumes/cache/data:/data
    restart: unless-stopped

  dataverse:
    container_name: "dataverse"
    hostname: dataverse
    build:
      dockerfile: ./dataverse/Dockerfile
      args:
        - BASE_VERSION=${BASE_VERSION:-unstable}
        - DATAVERSE_WAR_URL=${DATAVERSE_WAR_URL:-https://github.com/ErykKul/dataverse/releases/download/OIDC/dataverse-6.4.war}
        - USER_ID=${USER_ID:-1000}
        - GROUP_ID=${GROUP_ID:-1000}
    restart: on-failure
    user: payara
    environment:
      MP_CONFIG_PROFILE: prod
      JVM_ARGS: -Ddataverse.files.storage-driver-id=minio1
        -Ddataverse.files.localstack1.type=s3
        -Ddataverse.files.localstack1.label=LocalStack
        -Ddataverse.files.localstack1.custom-endpoint-url=http://localstack.mydomain.com:4566
        -Ddataverse.files.localstack1.custom-endpoint-region=us-east-2
        -Ddataverse.files.localstack1.bucket-name=mybucket
        -Ddataverse.files.localstack1.path-style-access=true
        -Ddataverse.files.localstack1.upload-redirect=true
        -Ddataverse.files.localstack1.download-redirect=true
        -Ddataverse.files.localstack1.access-key=default
        -Ddataverse.files.localstack1.secret-key=default
        -Ddataverse.files.localstack1.upload-out-of-band=true
        -Ddataverse.files.minio1.type=s3
        -Ddataverse.files.minio1.label=MinIO
        -Ddataverse.files.minio1.custom-endpoint-url=http://minio.mydomain.com:9000
        -Ddataverse.files.minio1.custom-endpoint-region=us-east-1
        -Ddataverse.files.minio1.bucket-name=mybucket
        -Ddataverse.files.minio1.path-style-access=true
        -Ddataverse.files.minio1.upload-redirect=true
        -Ddataverse.files.minio1.download-redirect=true
        -Ddataverse.files.minio1.access-key=4cc355_k3y
        -Ddataverse.files.minio1.secret-key=s3cr3t_4cc355_k3y
        -Ddataverse.files.minio1.upload-out-of-band=true
        -Ddataverse.pid.providers=fake
        -Ddataverse.pid.default-provider=fake
        -Ddataverse.pid.fake.type=FAKE
        -Ddataverse.pid.fake.label=FakeDOIProvider
        -Ddataverse.pid.fake.authority=10.5072
        -Ddataverse.pid.fake.shoulder=FK2/
        -Ddataverse.db.host=postgres
        -Ddataverse.db.password=secret
        -Ddataverse.db.user=dataverse
        -Ddataverse.mail.system-email=dataverse@localhost
        -Ddataverse.mail.mta.host=smtp
        -Ddataverse.auth.oidc.enabled=1
        -Ddataverse.auth.oidc.client-id=test
        -Ddataverse.auth.oidc.client-secret=94XHrfNRwXsjqTqApRrwWmhDLDHpIYV8
        -Ddataverse.auth.oidc.auth-server-url=http://keycloak.mydomain.com:8090/realms/test
        -Ddataverse.spi.exporters.directory=/dv/exporters
        -Ddataverse.oai.server.maxidentifiers=2
        -Ddataverse.oai.server.maxrecords=2
        -Ddataverse.solr.host=solr
        -Ddataverse.fqdn=localhost:8080
        -Ddataverse.siteUrl=http://localhost:8080
        -Ddataverse.api.allow-incomplete-metadata=true
        -Ddataverse.ui.allow-review-for-incomplete=false
        -Ddataverse.ui.show-validity-filter=true
    ports:
      - "8080:8080" # HTTP (Dataverse Application)
    networks:
      - dataverse
    depends_on:
      - postgres
      - solr
    volumes:
      - ./docker-volumes/dataverse/data:/dv
      - ./docker-volumes/dataverse/conf:/conf
      - ./docker-volumes/dataverse/secrets:/run/secrets
      - ./dataverse/init_dv.sh:/opt/payara/scripts/init.d/init_dv.sh
      - ./dataverse/setup.sh:/scripts/setup.sh
      - ./dataverse/setup-tools:/scripts/setup-tools
      - ./dataverse/update-fields.sh:/scripts/update-fields.sh
      - ./docker-volumes/solr/data/data/collection1:/solr
    tmpfs:
      - /dumps:mode=770,size=2052M,uid=${USER_ID:-1000},gid=${GROUP_ID:-1000}
      - /tmp:mode=770,size=2052M,uid=${USER_ID:-1000},gid=${GROUP_ID:-1000}
    mem_limit: 2147483648 # 2 GiB
    mem_reservation: 1024m
    privileged: false

  postgres:
    container_name: "postgres"
    hostname: postgres
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    image: postgres:16
    restart: unless-stopped
    environment:
      - POSTGRES_USER=dataverse
      - POSTGRES_PASSWORD=secret
    networks:
      - dataverse
    volumes:
      - ./docker-volumes/postgresql/data:/var/lib/postgresql/data

  solr:
    container_name: "solr"
    hostname: "solr"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    image: solr:9.3.0
    command:
      - "solr-precreate"
      - "collection1"
      - "/template"
    restart: on-failure
    networks:
      - dataverse
    volumes:
      - ./docker-volumes/solr/data:/var/solr
      - ./docker-volumes/solr/conf:/template

  smtp:
    container_name: "smtp"
    hostname: "smtp"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    image: maildev/maildev:2.0.5
    restart: unless-stopped
    ports:
      - "1080:1080" # web ui
    environment:
      - MAILSMTP_PORT=25
      - MAILMAIL_DIRECTORY=/mail
    networks:
      - dataverse
    tmpfs:
      - /mail:mode=770,size=128M,uid=1000,gid=1000

  keycloak:
    container_name: "keycloak"
    image: 'quay.io/keycloak/keycloak:21.0'
    hostname: keycloak
    restart: unless-stopped
    environment:
      - KEYCLOAK_ADMIN=kcadmin
      - KEYCLOAK_ADMIN_PASSWORD=kcpassword
      - KEYCLOAK_LOGLEVEL=DEBUG
      - KC_HOSTNAME_STRICT=false
    networks:
      dataverse:
        aliases:
          - keycloak.mydomain.com #create a DNS alias within the network (add the same alias to your /etc/hosts to get a working OIDC flow)
    command: start-dev --import-realm --http-port=8090  # change port to 8090, so within the network and external the same port is used
    ports:
      - "8090:8090"
    volumes:
      - ./docker-volumes/keycloak/conf/test-realm.json:/opt/keycloak/data/import/test-realm.json

  localstack:
    container_name: "localstack"
    hostname: "localstack"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    image: localstack/localstack:3.8.1
    restart: unless-stopped
    ports:
      - "127.0.0.1:4566:4566"
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
      - LOCALSTACK_HOST=localstack.mydomain.com
      - EXTRA_CORS_ALLOWED_ORIGINS=http://localhost:8080
    networks:
      dataverse:
        aliases:
          - localstack.mydomain.com #create a DNS alias within the network (add the same alias to your /etc/hosts to get a working s3 redirects flow)
    volumes:
      - ./docker-volumes/localstack/conf:/etc/localstack/init/ready.d
      - ./docker-volumes/localstack/data:/var/lib/localstack

  minio:
    container_name: "minio"
    hostname: "minio"
    user: "${USER_ID:-1000}:${GROUP_ID:-1000}"
    image: minio/minio
    restart: on-failure
    ports:
      - "9000:9000"
    networks:
      dataverse:
        aliases:
          - minio.mydomain.com #create a DNS alias within the network (add the same alias to your /etc/hosts to get a working s3 redirects flow)
    volumes:
      - ./docker-volumes/minio/data:/data
    environment:
      MINIO_ROOT_USER: 4cc355_k3y
      MINIO_ROOT_PASSWORD: s3cr3t_4cc355_k3y
    command: server /data

networks:
  dataverse:
    driver: bridge
